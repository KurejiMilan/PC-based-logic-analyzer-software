
Logic Analyzer mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002084  08002084  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002084  08002084  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002084  08002084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800208c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08002098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002098  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ac5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000128e  00000000  00000000  00025afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00026d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000590  00000000  00000000  00027380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161bb  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064ce  00000000  00000000  0003dacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007efe6  00000000  00000000  00043f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2f7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e4  00000000  00000000  000c2fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002044 	.word	0x08002044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002044 	.word	0x08002044

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0c8      	sub	sp, #288	; 0x120
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fdc1 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fbbd 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fc2b 	bl	80009b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 fbff 	bl	8000960 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // stores received command from PC software
  uint8_t receivedWord = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
  // operatingMode defines if it's communicating with logic analyzer software or acquiring data
  // 0  is for communicating with logic analyzer software to configure trigger and sample rates

  uint8_t ConfigTrigger = 0x01, ReadyToRx = 2, AckFromRx = 255;
 8000168:	2301      	movs	r3, #1
 800016a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800016e:	2302      	movs	r3, #2
 8000170:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8000174:	23ff      	movs	r3, #255	; 0xff
 8000176:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
  uint8_t sampleReady = 245, chunkReceiveAck =242, sampleTransmitComplete = 243, ackFromTx = 244;
 800017a:	23f5      	movs	r3, #245	; 0xf5
 800017c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000180:	23f2      	movs	r3, #242	; 0xf2
 8000182:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000186:	23f3      	movs	r3, #243	; 0xf3
 8000188:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800018c:	23f4      	movs	r3, #244	; 0xf4
 800018e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

  uint8_t READY_TO_TX_SAMPLE_RATE = 0x03;
 8000192:	2303      	movs	r3, #3
 8000194:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  uint8_t READY_TO_TX_SAMPLE_SIZE = 0x04;
 8000198:	2304      	movs	r3, #4
 800019a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

  volatile uint8_t operatingMode = 0;										// defines if it's communicating or reading samples
 800019e:	2300      	movs	r3, #0
 80001a0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

  volatile uint8_t triggerType = 0, triggerMask = 0, triggerWord = 0, sampleRateIndex = 2, sampleSizeIndex = 3;
 80001a4:	2300      	movs	r3, #0
 80001a6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80001aa:	2300      	movs	r3, #0
 80001ac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80001b0:	2300      	movs	r3, #0
 80001b2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80001b6:	2302      	movs	r3, #2
 80001b8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
 80001bc:	2303      	movs	r3, #3
 80001be:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
  volatile uint8_t tempData = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  volatile uint16_t blockTransferSize = 32;   	                           	// default number due to default sample size 3
 80001c8:	2320      	movs	r3, #32
 80001ca:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  uint8_t samplePtr[256];

  GPIOC->ODR &=  ~(1<<13);
 80001ce:	4bb4      	ldr	r3, [pc, #720]	; (80004a0 <main+0x354>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4ab3      	ldr	r2, [pc, #716]	; (80004a0 <main+0x354>)
 80001d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001d8:	60d3      	str	r3, [r2, #12]
//  GPIOC->ODR |= 1<<13;

  HAL_Delay(5000);															// LETTING THE FPGA TO START
 80001da:	f241 3088 	movw	r0, #5000	; 0x1388
 80001de:	f000 fddd 	bl	8000d9c <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	48ae      	ldr	r0, [pc, #696]	; (80004a0 <main+0x354>)
 80001e8:	f001 f872 	bl	80012d0 <HAL_GPIO_TogglePin>
  // initializing FPGA

  // making sure that FPGA is not clocked
  GPIOC->ODR &= ~(1<<MASTER_CONTROL);
 80001ec:	4bac      	ldr	r3, [pc, #688]	; (80004a0 <main+0x354>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4aab      	ldr	r2, [pc, #684]	; (80004a0 <main+0x354>)
 80001f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80001f6:	60d3      	str	r3, [r2, #12]

  // making sure that input latch are disabled
  GPIOA->ODR &= ~1;
 80001f8:	4baa      	ldr	r3, [pc, #680]	; (80004a4 <main+0x358>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	4aa9      	ldr	r2, [pc, #676]	; (80004a4 <main+0x358>)
 80001fe:	f023 0301 	bic.w	r3, r3, #1
 8000202:	60d3      	str	r3, [r2, #12]

  // setting default clock rate
  GPIOB->ODR = 2<<DATA_FROM_MCU;
 8000204:	4ba8      	ldr	r3, [pc, #672]	; (80004a8 <main+0x35c>)
 8000206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800020a:	60da      	str	r2, [r3, #12]
  GPIOA->ODR |= 1<<CLOCK_SELECT_CLOCK_IN;
 800020c:	4ba5      	ldr	r3, [pc, #660]	; (80004a4 <main+0x358>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4aa4      	ldr	r2, [pc, #656]	; (80004a4 <main+0x358>)
 8000212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000216:	60d3      	str	r3, [r2, #12]
  HAL_Delay(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f000 fdbf 	bl	8000d9c <HAL_Delay>
  GPIOA->ODR &= ~(1<<CLOCK_SELECT_CLOCK_IN);
 800021e:	4ba1      	ldr	r3, [pc, #644]	; (80004a4 <main+0x358>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	4aa0      	ldr	r2, [pc, #640]	; (80004a4 <main+0x358>)
 8000224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000228:	60d3      	str	r3, [r2, #12]

  // setting default sample size
  GPIOB->ODR = 0b00011111<<DATA_FROM_MCU;
 800022a:	4b9f      	ldr	r3, [pc, #636]	; (80004a8 <main+0x35c>)
 800022c:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000230:	60da      	str	r2, [r3, #12]
  GPIOA->ODR &= ~(3<<PULSEIN_DEMUX_SELECT);
 8000232:	4b9c      	ldr	r3, [pc, #624]	; (80004a4 <main+0x358>)
 8000234:	68db      	ldr	r3, [r3, #12]
 8000236:	4a9b      	ldr	r2, [pc, #620]	; (80004a4 <main+0x358>)
 8000238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800023c:	60d3      	str	r3, [r2, #12]
  latchInPulse();
 800023e:	f000 fb17 	bl	8000870 <latchInPulse>

  GPIOB->ODR = 0b11111111<<DATA_FROM_MCU;
 8000242:	4b99      	ldr	r3, [pc, #612]	; (80004a8 <main+0x35c>)
 8000244:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000248:	60da      	str	r2, [r3, #12]
  GPIOA->ODR &= ~(3<<PULSEIN_DEMUX_SELECT);
 800024a:	4b96      	ldr	r3, [pc, #600]	; (80004a4 <main+0x358>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a95      	ldr	r2, [pc, #596]	; (80004a4 <main+0x358>)
 8000250:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000254:	60d3      	str	r3, [r2, #12]
  GPIOA->ODR |= 1<<PULSEIN_DEMUX_SELECT;
 8000256:	4b93      	ldr	r3, [pc, #588]	; (80004a4 <main+0x358>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a92      	ldr	r2, [pc, #584]	; (80004a4 <main+0x358>)
 800025c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000260:	60d3      	str	r3, [r2, #12]
  latchInPulse();
 8000262:	f000 fb05 	bl	8000870 <latchInPulse>

  // IF TRIGGER STATUS IS SET FOR SOME REASON RESET IT
  resetTriggerSignal();
 8000266:	f000 fb19 	bl	800089c <resetTriggerSignal>

  //RESET counter
  // resets on rising edge can be set to low when starting sampling process
  GPIOA->ODR |= 1<<RESET_COUNTER;
 800026a:	4b8e      	ldr	r3, [pc, #568]	; (80004a4 <main+0x358>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	4a8d      	ldr	r2, [pc, #564]	; (80004a4 <main+0x358>)
 8000270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000274:	60d3      	str	r3, [r2, #12]
  HAL_Delay(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fd90 	bl	8000d9c <HAL_Delay>
  GPIOA->ODR &= ~(1<<RESET_COUNTER);
 800027c:	4b89      	ldr	r3, [pc, #548]	; (80004a4 <main+0x358>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a88      	ldr	r2, [pc, #544]	; (80004a4 <main+0x358>)
 8000282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000286:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // communicate with software mode
	  if(operatingMode == 0){
 8000288:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 8203 	bne.w	800069a <main+0x54e>

		  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 8000294:	f507 7189 	add.w	r1, r7, #274	; 0x112
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2201      	movs	r2, #1
 800029e:	4883      	ldr	r0, [pc, #524]	; (80004ac <main+0x360>)
 80002a0:	f001 fd29 	bl	8001cf6 <HAL_UART_Receive>
		  tempData = receivedWord;
 80002a4:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80002a8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		  if(tempData == (uint8_t)TRANSMITDATA) operatingMode = 1;
 80002ac:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2bf0      	cmp	r3, #240	; 0xf0
 80002b4:	d103      	bne.n	80002be <main+0x172>
 80002b6:	2301      	movs	r3, #1
 80002b8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80002bc:	e1e9      	b.n	8000692 <main+0x546>

		  //	if trigger setting is received then
		  else if(tempData == ConfigTrigger){
 80002be:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f040 80f1 	bne.w	80004b0 <main+0x364>
			  HAL_UART_Transmit(&huart1, &ReadyToRx, 1, HAL_MAX_DELAY);
 80002ce:	f207 1111 	addw	r1, r7, #273	; 0x111
 80002d2:	f04f 33ff 	mov.w	r3, #4294967295
 80002d6:	2201      	movs	r2, #1
 80002d8:	4874      	ldr	r0, [pc, #464]	; (80004ac <main+0x360>)
 80002da:	f001 fc7a 	bl	8001bd2 <HAL_UART_Transmit>
			  // receive the trigger type
			  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 80002de:	f507 7189 	add.w	r1, r7, #274	; 0x112
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	2201      	movs	r2, #1
 80002e8:	4870      	ldr	r0, [pc, #448]	; (80004ac <main+0x360>)
 80002ea:	f001 fd04 	bl	8001cf6 <HAL_UART_Receive>
			  triggerType = receivedWord;
 80002ee:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80002f2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c

			  if(triggerType == 0){
 80002f6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d110      	bne.n	8000322 <main+0x1d6>
				  // no trigger
				  // the no trigger should be handler in other section
				  HAL_UART_Transmit(&huart1, &AckFromRx, 1, 100);
 8000300:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	4868      	ldr	r0, [pc, #416]	; (80004ac <main+0x360>)
 800030a:	f001 fc62 	bl	8001bd2 <HAL_UART_Transmit>
				  HAL_Delay(10);
 800030e:	200a      	movs	r0, #10
 8000310:	f000 fd44 	bl	8000d9c <HAL_Delay>
				  GPIOC->ODR &=  ~(1<<13);
 8000314:	4b62      	ldr	r3, [pc, #392]	; (80004a0 <main+0x354>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a61      	ldr	r2, [pc, #388]	; (80004a0 <main+0x354>)
 800031a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800031e:	60d3      	str	r3, [r2, #12]
 8000320:	e08c      	b.n	800043c <main+0x2f0>
			  }

			  else if(triggerType == 1){
 8000322:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b01      	cmp	r3, #1
 800032a:	d14e      	bne.n	80003ca <main+0x27e>
				  // this is edge trigger
				  HAL_UART_Transmit(&huart1,  &AckFromRx, 1, 100);
 800032c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000330:	2364      	movs	r3, #100	; 0x64
 8000332:	2201      	movs	r2, #1
 8000334:	485d      	ldr	r0, [pc, #372]	; (80004ac <main+0x360>)
 8000336:	f001 fc4c 	bl	8001bd2 <HAL_UART_Transmit>
				  HAL_Delay(10);
 800033a:	200a      	movs	r0, #10
 800033c:	f000 fd2e 	bl	8000d9c <HAL_Delay>
				  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 8000340:	f507 7189 	add.w	r1, r7, #274	; 0x112
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	2201      	movs	r2, #1
 800034a:	4858      	ldr	r0, [pc, #352]	; (80004ac <main+0x360>)
 800034c:	f001 fcd3 	bl	8001cf6 <HAL_UART_Receive>
				  triggerMask = receivedWord;
 8000350:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000354:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
				  HAL_UART_Transmit(&huart1, &AckFromRx, 1, 100);
 8000358:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800035c:	2364      	movs	r3, #100	; 0x64
 800035e:	2201      	movs	r2, #1
 8000360:	4852      	ldr	r0, [pc, #328]	; (80004ac <main+0x360>)
 8000362:	f001 fc36 	bl	8001bd2 <HAL_UART_Transmit>
				  HAL_Delay(5);
 8000366:	2005      	movs	r0, #5
 8000368:	f000 fd18 	bl	8000d9c <HAL_Delay>
				  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 800036c:	f507 7189 	add.w	r1, r7, #274	; 0x112
 8000370:	f04f 33ff 	mov.w	r3, #4294967295
 8000374:	2201      	movs	r2, #1
 8000376:	484d      	ldr	r0, [pc, #308]	; (80004ac <main+0x360>)
 8000378:	f001 fcbd 	bl	8001cf6 <HAL_UART_Receive>
				  triggerWord = ~receivedWord;														// this inversion is necessary look at xor truth table
 800037c:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000380:	43db      	mvns	r3, r3
 8000382:	b2db      	uxtb	r3, r3
 8000384:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
				  HAL_UART_Transmit(&huart1,  &AckFromRx, 1, 100);
 8000388:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800038c:	2364      	movs	r3, #100	; 0x64
 800038e:	2201      	movs	r2, #1
 8000390:	4846      	ldr	r0, [pc, #280]	; (80004ac <main+0x360>)
 8000392:	f001 fc1e 	bl	8001bd2 <HAL_UART_Transmit>
				  HAL_Delay(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fd00 	bl	8000d9c <HAL_Delay>

				  GPIOA->ODR &= ~(1<<TRIGGER_MUX_SELECT);
 800039c:	4b41      	ldr	r3, [pc, #260]	; (80004a4 <main+0x358>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a40      	ldr	r2, [pc, #256]	; (80004a4 <main+0x358>)
 80003a2:	f023 0320 	bic.w	r3, r3, #32
 80003a6:	60d3      	str	r3, [r2, #12]
				  if((triggerWord == 0X0f)&&(triggerMask == 0x0f)) GPIOC->ODR &=  ~(1<<13);			// just to validate if correct data is transmitted
 80003a8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2b0f      	cmp	r3, #15
 80003b0:	d144      	bne.n	800043c <main+0x2f0>
 80003b2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b0f      	cmp	r3, #15
 80003ba:	d13f      	bne.n	800043c <main+0x2f0>
 80003bc:	4b38      	ldr	r3, [pc, #224]	; (80004a0 <main+0x354>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a37      	ldr	r2, [pc, #220]	; (80004a0 <main+0x354>)
 80003c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003c6:	60d3      	str	r3, [r2, #12]
 80003c8:	e038      	b.n	800043c <main+0x2f0>
			  }

			  else if(triggerType == 2){
 80003ca:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d133      	bne.n	800043c <main+0x2f0>
				  // this is word trigger
				  HAL_UART_Transmit(&huart1, &AckFromRx, 1, 100);
 80003d4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80003d8:	2364      	movs	r3, #100	; 0x64
 80003da:	2201      	movs	r2, #1
 80003dc:	4833      	ldr	r0, [pc, #204]	; (80004ac <main+0x360>)
 80003de:	f001 fbf8 	bl	8001bd2 <HAL_UART_Transmit>
				  HAL_Delay(10);
 80003e2:	200a      	movs	r0, #10
 80003e4:	f000 fcda 	bl	8000d9c <HAL_Delay>
				  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 80003e8:	f507 7189 	add.w	r1, r7, #274	; 0x112
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	2201      	movs	r2, #1
 80003f2:	482e      	ldr	r0, [pc, #184]	; (80004ac <main+0x360>)
 80003f4:	f001 fc7f 	bl	8001cf6 <HAL_UART_Receive>
				  triggerWord = receivedWord;														// this inversion is necessary look at xor truth table
 80003f8:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80003fc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
				  HAL_UART_Transmit(&huart1,  &AckFromRx, 1, 100);
 8000400:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	2201      	movs	r2, #1
 8000408:	4828      	ldr	r0, [pc, #160]	; (80004ac <main+0x360>)
 800040a:	f001 fbe2 	bl	8001bd2 <HAL_UART_Transmit>
				  HAL_Delay(1);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fcc4 	bl	8000d9c <HAL_Delay>

				  triggerMask = 0XFF;
 8000414:	23ff      	movs	r3, #255	; 0xff
 8000416:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

				  GPIOA->ODR |= (1<<TRIGGER_MUX_SELECT);
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <main+0x358>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <main+0x358>)
 8000420:	f043 0320 	orr.w	r3, r3, #32
 8000424:	60d3      	str	r3, [r2, #12]

				  if(triggerWord == 0X0f) GPIOC->ODR &=  ~(1<<13);			// JUST FOR TEST
 8000426:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b0f      	cmp	r3, #15
 800042e:	d105      	bne.n	800043c <main+0x2f0>
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <main+0x354>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <main+0x354>)
 8000436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800043a:	60d3      	str	r3, [r2, #12]
			  }

			  // since no trigger is handled in different way
			  // makes use of same code block for both edge and word trigger
			  if(triggerType != 0){
 800043c:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	f000 8125 	beq.w	8000692 <main+0x546>
				  // SETTING THE MASK REGISTER IN TRIGGER MODULE
				  GPIOA->ODR &= ~(3<<PULSEIN_DEMUX_SELECT);
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <main+0x358>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <main+0x358>)
 800044e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000452:	60d3      	str	r3, [r2, #12]
				  GPIOA->ODR |= 2<<PULSEIN_DEMUX_SELECT;
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <main+0x358>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <main+0x358>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045e:	60d3      	str	r3, [r2, #12]
				  GPIOB->ODR = triggerMask<<DATA_FROM_MCU;
 8000460:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000464:	b2db      	uxtb	r3, r3
 8000466:	021a      	lsls	r2, r3, #8
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <main+0x35c>)
 800046a:	60da      	str	r2, [r3, #12]
				  latchInPulse();
 800046c:	f000 fa00 	bl	8000870 <latchInPulse>

				  // SETTING THE WORD REGISTER IN TRIGGER MODULE
				  GPIOA->ODR &= ~(3<<PULSEIN_DEMUX_SELECT);
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <main+0x358>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <main+0x358>)
 8000476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800047a:	60d3      	str	r3, [r2, #12]
				  GPIOA->ODR |= 3<<PULSEIN_DEMUX_SELECT;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <main+0x358>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <main+0x358>)
 8000482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000486:	60d3      	str	r3, [r2, #12]
				  GPIOB->ODR = triggerWord<<DATA_FROM_MCU;
 8000488:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800048c:	b2db      	uxtb	r3, r3
 800048e:	021a      	lsls	r2, r3, #8
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <main+0x35c>)
 8000492:	60da      	str	r2, [r3, #12]
				  latchInPulse();
 8000494:	f000 f9ec 	bl	8000870 <latchInPulse>

				  resetTriggerSignal();
 8000498:	f000 fa00 	bl	800089c <resetTriggerSignal>
 800049c:	e0f9      	b.n	8000692 <main+0x546>
 800049e:	bf00      	nop
 80004a0:	40011000 	.word	0x40011000
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	20000028 	.word	0x20000028
			  }
		  }


		  // setting sample rate // tested
		  else if(tempData == READY_TO_TX_SAMPLE_RATE){
 80004b0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d163      	bne.n	8000586 <main+0x43a>
			  HAL_UART_Transmit(&huart1, &ReadyToRx, 1, 100);
 80004be:	f207 1111 	addw	r1, r7, #273	; 0x111
 80004c2:	2364      	movs	r3, #100	; 0x64
 80004c4:	2201      	movs	r2, #1
 80004c6:	4888      	ldr	r0, [pc, #544]	; (80006e8 <main+0x59c>)
 80004c8:	f001 fb83 	bl	8001bd2 <HAL_UART_Transmit>
			  HAL_Delay(10);
 80004cc:	200a      	movs	r0, #10
 80004ce:	f000 fc65 	bl	8000d9c <HAL_Delay>
			  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 80004d2:	f507 7189 	add.w	r1, r7, #274	; 0x112
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
 80004da:	2201      	movs	r2, #1
 80004dc:	4882      	ldr	r0, [pc, #520]	; (80006e8 <main+0x59c>)
 80004de:	f001 fc0a 	bl	8001cf6 <HAL_UART_Receive>
			  sampleRateIndex = receivedWord;
 80004e2:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80004e6:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
			  HAL_UART_Transmit(&huart1, &AckFromRx, 1, 100);
 80004ea:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	2201      	movs	r2, #1
 80004f2:	487d      	ldr	r0, [pc, #500]	; (80006e8 <main+0x59c>)
 80004f4:	f001 fb6d 	bl	8001bd2 <HAL_UART_Transmit>
			  HAL_Delay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fc4f 	bl	8000d9c <HAL_Delay>

			  switch (sampleRateIndex){
 80004fe:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b03      	cmp	r3, #3
 8000506:	d81e      	bhi.n	8000546 <main+0x3fa>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <main+0x3c4>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000521 	.word	0x08000521
 8000514:	08000529 	.word	0x08000529
 8000518:	08000533 	.word	0x08000533
 800051c:	0800053d 	.word	0x0800053d
			  	  case 0:
			  		  GPIOB->ODR = 0<<DATA_FROM_MCU;
 8000520:	4b72      	ldr	r3, [pc, #456]	; (80006ec <main+0x5a0>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
			  		  break;
 8000526:	e012      	b.n	800054e <main+0x402>
			  	  case 1:
			  		  GPIOB->ODR = 1<<DATA_FROM_MCU;
 8000528:	4b70      	ldr	r3, [pc, #448]	; (80006ec <main+0x5a0>)
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	60da      	str	r2, [r3, #12]
			  		  break;
 8000530:	e00d      	b.n	800054e <main+0x402>
			  	  case 2:
			  		  GPIOB->ODR = 2<<DATA_FROM_MCU;
 8000532:	4b6e      	ldr	r3, [pc, #440]	; (80006ec <main+0x5a0>)
 8000534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000538:	60da      	str	r2, [r3, #12]
			  		  break;
 800053a:	e008      	b.n	800054e <main+0x402>
			  	  case 3:
			  		  GPIOB->ODR = 3<<DATA_FROM_MCU;
 800053c:	4b6b      	ldr	r3, [pc, #428]	; (80006ec <main+0x5a0>)
 800053e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000542:	60da      	str	r2, [r3, #12]
			  		  break;
 8000544:	e003      	b.n	800054e <main+0x402>
			  	  default:
			  		  GPIOB->ODR = 4<<DATA_FROM_MCU;
 8000546:	4b69      	ldr	r3, [pc, #420]	; (80006ec <main+0x5a0>)
 8000548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800054c:	60da      	str	r2, [r3, #12]

			  }

			  GPIOA->ODR |= 1<<CLOCK_SELECT_CLOCK_IN;
 800054e:	4b68      	ldr	r3, [pc, #416]	; (80006f0 <main+0x5a4>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	4a67      	ldr	r2, [pc, #412]	; (80006f0 <main+0x5a4>)
 8000554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000558:	60d3      	str	r3, [r2, #12]
			  HAL_Delay(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fc1e 	bl	8000d9c <HAL_Delay>
			  GPIOA->ODR &= ~(1<<CLOCK_SELECT_CLOCK_IN);
 8000560:	4b63      	ldr	r3, [pc, #396]	; (80006f0 <main+0x5a4>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a62      	ldr	r2, [pc, #392]	; (80006f0 <main+0x5a4>)
 8000566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800056a:	60d3      	str	r3, [r2, #12]

			  if (sampleRateIndex == 0) GPIOC->ODR &=  ~(1<<13);			// JUST FOR TEST
 800056c:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	f040 808d 	bne.w	8000692 <main+0x546>
 8000578:	4b5e      	ldr	r3, [pc, #376]	; (80006f4 <main+0x5a8>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a5d      	ldr	r2, [pc, #372]	; (80006f4 <main+0x5a8>)
 800057e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000582:	60d3      	str	r3, [r2, #12]
 8000584:	e085      	b.n	8000692 <main+0x546>
		  }

		  // setting sample size //tested
		  else if(tempData == READY_TO_TX_SAMPLE_SIZE){
 8000586:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000590:	429a      	cmp	r2, r3
 8000592:	d17e      	bne.n	8000692 <main+0x546>
			  HAL_UART_Transmit(&huart1, &ReadyToRx, 1, 100);
 8000594:	f207 1111 	addw	r1, r7, #273	; 0x111
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	2201      	movs	r2, #1
 800059c:	4852      	ldr	r0, [pc, #328]	; (80006e8 <main+0x59c>)
 800059e:	f001 fb18 	bl	8001bd2 <HAL_UART_Transmit>
			  HAL_Delay(10);
 80005a2:	200a      	movs	r0, #10
 80005a4:	f000 fbfa 	bl	8000d9c <HAL_Delay>
			  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 80005a8:	f507 7189 	add.w	r1, r7, #274	; 0x112
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	2201      	movs	r2, #1
 80005b2:	484d      	ldr	r0, [pc, #308]	; (80006e8 <main+0x59c>)
 80005b4:	f001 fb9f 	bl	8001cf6 <HAL_UART_Receive>
			  sampleSizeIndex = receivedWord;
 80005b8:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80005bc:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			  HAL_UART_Transmit(&huart1, &AckFromRx, 1, 100);
 80005c0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4847      	ldr	r0, [pc, #284]	; (80006e8 <main+0x59c>)
 80005ca:	f001 fb02 	bl	8001bd2 <HAL_UART_Transmit>
			  HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fbe4 	bl	8000d9c <HAL_Delay>

			  // setting compare address msb
			  switch(sampleSizeIndex){
 80005d4:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d83e      	bhi.n	800065c <main+0x510>
 80005de:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <main+0x498>)
 80005e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e4:	080005fd 	.word	0x080005fd
 80005e8:	0800060d 	.word	0x0800060d
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	0800062d 	.word	0x0800062d
 80005f4:	0800063d 	.word	0x0800063d
 80005f8:	0800064d 	.word	0x0800064d
			  	  case 0:
			  		  GPIOB->ODR = 0b00000011<<DATA_FROM_MCU;
 80005fc:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <main+0x5a0>)
 80005fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000602:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  		  break;
 800060a:	e02f      	b.n	800066c <main+0x520>
			  	  case 1:
			  		  GPIOB->ODR = 0b00000111<<DATA_FROM_MCU;
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <main+0x5a0>)
 800060e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000612:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  		  break;
 800061a:	e027      	b.n	800066c <main+0x520>
			  	  case 2:
			  		  GPIOB->ODR = 0b00001111<<DATA_FROM_MCU;
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <main+0x5a0>)
 800061e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000622:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 16;
 8000624:	2310      	movs	r3, #16
 8000626:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  		  break;
 800062a:	e01f      	b.n	800066c <main+0x520>
			  	  case 3:
			  		  GPIOB->ODR = 0b00011111<<DATA_FROM_MCU;
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <main+0x5a0>)
 800062e:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000632:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 32;
 8000634:	2320      	movs	r3, #32
 8000636:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  		  break;
 800063a:	e017      	b.n	800066c <main+0x520>
			  	  case 4:
			  		  GPIOB->ODR = 0b00111111<<DATA_FROM_MCU;
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <main+0x5a0>)
 800063e:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000642:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 64;
 8000644:	2340      	movs	r3, #64	; 0x40
 8000646:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  		  break;
 800064a:	e00f      	b.n	800066c <main+0x520>
			  	  case 5:
			  		  GPIOB->ODR = 0b01111111<<DATA_FROM_MCU;
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <main+0x5a0>)
 800064e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000652:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 128;
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  		  break;
 800065a:	e007      	b.n	800066c <main+0x520>
			  	  default:
			  		  GPIOB->ODR = 0b11111111<<DATA_FROM_MCU;
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <main+0x5a0>)
 800065e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000662:	60da      	str	r2, [r3, #12]
			  		  blockTransferSize = 256;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			  }

			  GPIOA->ODR &= ~(3<<PULSEIN_DEMUX_SELECT);
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <main+0x5a4>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <main+0x5a4>)
 8000672:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000676:	60d3      	str	r3, [r2, #12]
			  latchInPulse();
 8000678:	f000 f8fa 	bl	8000870 <latchInPulse>
//
//			  GPIOA->ODR &= ~(3<<PULSEIN_DEMUX_SELECT);
//			  GPIOA->ODR |= 1<<PULSEIN_DEMUX_SELECT;
//			  latchInPulse();

			  if (sampleSizeIndex == 1) GPIOC->ODR &=  ~(1<<13);			// JUST FOR TEST
 800067c:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b01      	cmp	r3, #1
 8000684:	d105      	bne.n	8000692 <main+0x546>
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <main+0x5a8>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <main+0x5a8>)
 800068c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000690:	60d3      	str	r3, [r2, #12]
		  }

		  tempData = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8000698:	e5f6      	b.n	8000288 <main+0x13c>
	  }

	  // read acquire data mode
	  else if(operatingMode == 1){
 800069a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	f47f adf1 	bne.w	8000288 <main+0x13c>
		  // uncomment this section for final firmware
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <main+0x5a8>)
 80006ac:	f000 fe10 	bl	80012d0 <HAL_GPIO_TogglePin>

		  if(triggerType == 0){
 80006b0:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d11e      	bne.n	80006f8 <main+0x5ac>
			  // set the trigger signal
			  if(! (GPIOA->IDR & (1<<TRIGGER_STATUS)) ){
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <main+0x5a4>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d11a      	bne.n	80006fc <main+0x5b0>
				GPIOA->ODR |= 1<<RESET_TRIGGER;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <main+0x5a4>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <main+0x5a4>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	60d3      	str	r3, [r2, #12]
				HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fb62 	bl	8000d9c <HAL_Delay>
				GPIOA->ODR &= ~(1<<RESET_TRIGGER);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <main+0x5a4>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <main+0x5a4>)
 80006de:	f023 0308 	bic.w	r3, r3, #8
 80006e2:	60d3      	str	r3, [r2, #12]
 80006e4:	e00a      	b.n	80006fc <main+0x5b0>
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40011000 	.word	0x40011000
			  }
		  }else{
			  // reset the trigger signal
			  resetTriggerSignal();
 80006f8:	f000 f8d0 	bl	800089c <resetTriggerSignal>
		  }

		  // reseting counter to 0 to start counting at 0 address
		  GPIOA->ODR |= 1<<RESET_COUNTER;
 80006fc:	4b58      	ldr	r3, [pc, #352]	; (8000860 <main+0x714>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4a57      	ldr	r2, [pc, #348]	; (8000860 <main+0x714>)
 8000702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000706:	60d3      	str	r3, [r2, #12]
		  HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fb47 	bl	8000d9c <HAL_Delay>
		  GPIOA->ODR &= ~(1<<RESET_COUNTER);
 800070e:	4b54      	ldr	r3, [pc, #336]	; (8000860 <main+0x714>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4a53      	ldr	r2, [pc, #332]	; (8000860 <main+0x714>)
 8000714:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000718:	60d3      	str	r3, [r2, #12]


		  GPIOA->ODR |= (1<<ENABLE_LATCH) | (1<<WRITE_ENABLE);		// enable latch and enables write operation
 800071a:	4b51      	ldr	r3, [pc, #324]	; (8000860 <main+0x714>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	4a50      	ldr	r2, [pc, #320]	; (8000860 <main+0x714>)
 8000720:	f043 0303 	orr.w	r3, r3, #3
 8000724:	60d3      	str	r3, [r2, #12]
		  GPIOC->ODR |= 1<<MASTER_CONTROL;
 8000726:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <main+0x718>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	4a4e      	ldr	r2, [pc, #312]	; (8000864 <main+0x718>)
 800072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000730:	60d3      	str	r3, [r2, #12]

		  // poll until complete signal enabled
		  while(! (GPIOA->IDR & (1<<COMPLETE)) );
 8000732:	bf00      	nop
 8000734:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <main+0x714>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <main+0x5e8>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	4847      	ldr	r0, [pc, #284]	; (8000864 <main+0x718>)
 8000746:	f000 fdc3 	bl	80012d0 <HAL_GPIO_TogglePin>

		  GPIOA->ODR &= ~( (1<<WRITE_ENABLE) | (1<<ENABLE_LATCH) ); // putting it into read mode
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <main+0x714>)
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	4a44      	ldr	r2, [pc, #272]	; (8000860 <main+0x714>)
 8000750:	f023 0303 	bic.w	r3, r3, #3
 8000754:	60d3      	str	r3, [r2, #12]
		  GPIOC->ODR &= ~(1<<MASTER_CONTROL);
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <main+0x718>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	4a42      	ldr	r2, [pc, #264]	; (8000864 <main+0x718>)
 800075c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000760:	60d3      	str	r3, [r2, #12]

		  HAL_UART_Transmit(&huart1, &sampleReady, 1, 100);
 8000762:	f207 110f 	addw	r1, r7, #271	; 0x10f
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <main+0x71c>)
 800076c:	f001 fa31 	bl	8001bd2 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 8000770:	f507 7189 	add.w	r1, r7, #274	; 0x112
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	2201      	movs	r2, #1
 800077a:	483b      	ldr	r0, [pc, #236]	; (8000868 <main+0x71c>)
 800077c:	f001 fabb 	bl	8001cf6 <HAL_UART_Receive>

		  GPIOA->ODR |= ( 1<<INC );
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <main+0x714>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	4a36      	ldr	r2, [pc, #216]	; (8000860 <main+0x714>)
 8000786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800078a:	60d3      	str	r3, [r2, #12]
		  GPIOA->ODR |= ( 1<<RESET_COUNTER );
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <main+0x714>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4a33      	ldr	r2, [pc, #204]	; (8000860 <main+0x714>)
 8000792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000796:	60d3      	str	r3, [r2, #12]
		  HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 faff 	bl	8000d9c <HAL_Delay>
		  GPIOA->ODR &= ~(1<<RESET_COUNTER);
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <main+0x714>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <main+0x714>)
 80007a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007a8:	60d3      	str	r3, [r2, #12]
		  GPIOA->ODR &= ~(1<<INC);
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <main+0x714>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <main+0x714>)
 80007b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007b4:	60d3      	str	r3, [r2, #12]



		  for(int i = 0; i<blockTransferSize; i++){
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80007bc:	e03c      	b.n	8000838 <main+0x6ec>

			  for(int j = 0; j < 256; j++){
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80007c4:	e01f      	b.n	8000806 <main+0x6ba>
				 samplePtr[j] = (GPIOB->IDR) & 0xFF;										// reading values
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <main+0x720>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	b2d9      	uxtb	r1, r3
 80007cc:	1d3a      	adds	r2, r7, #4
 80007ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007d2:	4413      	add	r3, r2
 80007d4:	460a      	mov	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
				 GPIOA->ODR |= (1<<INC);
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <main+0x714>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	4a20      	ldr	r2, [pc, #128]	; (8000860 <main+0x714>)
 80007de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e2:	60d3      	str	r3, [r2, #12]
				 GPIOA->ODR |= (1<<INC);
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <main+0x714>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <main+0x714>)
 80007ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ee:	60d3      	str	r3, [r2, #12]
				 GPIOA->ODR &= ~(1<<INC);
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <main+0x714>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <main+0x714>)
 80007f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007fa:	60d3      	str	r3, [r2, #12]
			  for(int j = 0; j < 256; j++){
 80007fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000800:	3301      	adds	r3, #1
 8000802:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000806:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800080a:	2bff      	cmp	r3, #255	; 0xff
 800080c:	dddb      	ble.n	80007c6 <main+0x67a>
			  }

			  HAL_UART_Transmit(&huart1, samplePtr, 256, HAL_MAX_DELAY);
 800080e:	1d39      	adds	r1, r7, #4
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <main+0x71c>)
 800081a:	f001 f9da 	bl	8001bd2 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart1, &receivedWord, 1, HAL_MAX_DELAY);
 800081e:	f507 7189 	add.w	r1, r7, #274	; 0x112
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2201      	movs	r2, #1
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <main+0x71c>)
 800082a:	f001 fa64 	bl	8001cf6 <HAL_UART_Receive>
		  for(int i = 0; i<blockTransferSize; i++){
 800082e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000832:	3301      	adds	r3, #1
 8000834:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000838:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800083c:	b29b      	uxth	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000844:	4293      	cmp	r3, r2
 8000846:	dbba      	blt.n	80007be <main+0x672>
//		  	HAL_Delay(1);
//		  }
//		 GPIOC->ODR |=  (1<<13);
//		 HAL_Delay(1);

		  HAL_UART_Transmit(&huart1, &sampleTransmitComplete, 1, 100);
 8000848:	f507 7187 	add.w	r1, r7, #270	; 0x10e
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	2201      	movs	r2, #1
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <main+0x71c>)
 8000852:	f001 f9be 	bl	8001bd2 <HAL_UART_Transmit>
		  operatingMode = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	  if(operatingMode == 0){
 800085c:	e514      	b.n	8000288 <main+0x13c>
 800085e:	bf00      	nop
 8000860:	40010800 	.word	0x40010800
 8000864:	40011000 	.word	0x40011000
 8000868:	20000028 	.word	0x20000028
 800086c:	40010c00 	.word	0x40010c00

08000870 <latchInPulse>:

  }
  /* USER CODE END 3 */
}

void latchInPulse(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	 GPIOA->ODR |= 1<<LATCH_PULSE;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <latchInPulse+0x28>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <latchInPulse+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	60d3      	str	r3, [r2, #12]
	 HAL_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 fa8b 	bl	8000d9c <HAL_Delay>
	 GPIOA->ODR &= ~(1<<LATCH_PULSE);
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <latchInPulse+0x28>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	4a03      	ldr	r2, [pc, #12]	; (8000898 <latchInPulse+0x28>)
 800088c:	f023 0310 	bic.w	r3, r3, #16
 8000890:	60d3      	str	r3, [r2, #12]
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010800 	.word	0x40010800

0800089c <resetTriggerSignal>:

void resetTriggerSignal(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & (1<<TRIGGER_STATUS)){
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <resetTriggerSignal+0x34>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00e      	beq.n	80008ca <resetTriggerSignal+0x2e>
		 GPIOA->ODR |= 1<<RESET_TRIGGER;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <resetTriggerSignal+0x34>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <resetTriggerSignal+0x34>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	60d3      	str	r3, [r2, #12]
		 HAL_Delay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f000 fa6f 	bl	8000d9c <HAL_Delay>
		 GPIOA->ODR &= ~(1<<RESET_TRIGGER);
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <resetTriggerSignal+0x34>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <resetTriggerSignal+0x34>)
 80008c4:	f023 0308 	bic.w	r3, r3, #8
 80008c8:	60d3      	str	r3, [r2, #12]
	 }
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010800 	.word	0x40010800

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b090      	sub	sp, #64	; 0x40
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2228      	movs	r2, #40	; 0x28
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fba6 	bl	8002034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000912:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fcf1 	bl	8001304 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000928:	f000 f8fe 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2102      	movs	r1, #2
 8000946:	4618      	mov	r0, r3
 8000948:	f000 ff5c 	bl	8001804 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000952:	f000 f8e9 	bl	8000b28 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3740      	adds	r7, #64	; 0x40
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART1_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000998:	f001 f8ce 	bl	8001b38 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f8c1 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000028 	.word	0x20000028
 80009b0:	40013800 	.word	0x40013800

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a52      	ldr	r2, [pc, #328]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b50      	ldr	r3, [pc, #320]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e0:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0320 	and.w	r3, r3, #32
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <MX_GPIO_Init+0x164>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x164>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <MX_GPIO_Init+0x164>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x164>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x164>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000a2e:	483b      	ldr	r0, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x168>)
 8000a30:	f000 fc36 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a34:	2200      	movs	r2, #0
 8000a36:	f24a 11fb 	movw	r1, #41467	; 0xa1fb
 8000a3a:	4839      	ldr	r0, [pc, #228]	; (8000b20 <MX_GPIO_Init+0x16c>)
 8000a3c:	f000 fc30 	bl	80012a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000a46:	4837      	ldr	r0, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a48:	f000 fc2a 	bl	80012a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a4c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	482d      	ldr	r0, [pc, #180]	; (8000b1c <MX_GPIO_Init+0x168>)
 8000a66:	f000 faa1 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a6a:	f242 13fb 	movw	r3, #8699	; 0x21fb
 8000a6e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4619      	mov	r1, r3
 8000a82:	4827      	ldr	r0, [pc, #156]	; (8000b20 <MX_GPIO_Init+0x16c>)
 8000a84:	f000 fa92 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a88:	23fb      	movs	r3, #251	; 0xfb
 8000a8a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a9c:	f000 fa86 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000ab4:	f000 fa7a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000ab8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000abc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4814      	ldr	r0, [pc, #80]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000ad2:	f000 fa6b 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_GPIO_Init+0x16c>)
 8000aec:	f000 fa5e 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0x16c>)
 8000b0a:	f000 fa4f 	bl	8000fac <HAL_GPIO_Init>

}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_MspInit+0x60>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_MspInit+0x60>)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <HAL_UART_MspInit+0x8c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d131      	bne.n	8000c1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_UART_MspInit+0x90>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <HAL_UART_MspInit+0x94>)
 8000bfe:	f000 f9d5 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_UART_MspInit+0x94>)
 8000c18:	f000 f9c8 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3720      	adds	r7, #32
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40013800 	.word	0x40013800
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 f875 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	; (8000cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cb2:	f7ff ffe4 	bl	8000c7e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f001 f999 	bl	8001fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cba:	f7ff fa47 	bl	800014c <main>
  bx lr
 8000cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc8:	0800208c 	.word	0x0800208c
  ldr r2, =_sbss
 8000ccc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd0:	20000070 	.word	0x20000070

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x28>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x28>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f92b 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff ff1e 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f935 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f90b 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x20>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <HAL_IncTick+0x20>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	20000008 	.word	0x20000008
 8000d84:	2000006c 	.word	0x2000006c

08000d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <HAL_GetTick+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	2000006c 	.word	0x2000006c

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fff0 	bl	8000d88 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffe0 	bl	8000d88 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff90 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff49 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff90 	bl	8000e9c <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5f 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b08b      	sub	sp, #44	; 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e148      	b.n	8001252 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8137 	bne.w	800124c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4aa3      	ldr	r2, [pc, #652]	; (8001270 <HAL_GPIO_Init+0x2c4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d05e      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8000fe8:	4aa1      	ldr	r2, [pc, #644]	; (8001270 <HAL_GPIO_Init+0x2c4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d875      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8000fee:	4aa1      	ldr	r2, [pc, #644]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d058      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a9f      	ldr	r2, [pc, #636]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d86f      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8000ffa:	4a9f      	ldr	r2, [pc, #636]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d052      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8001000:	4a9d      	ldr	r2, [pc, #628]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d869      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001006:	4a9d      	ldr	r2, [pc, #628]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d04c      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 800100c:	4a9b      	ldr	r2, [pc, #620]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d863      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001012:	4a9b      	ldr	r2, [pc, #620]	; (8001280 <HAL_GPIO_Init+0x2d4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d046      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
 8001018:	4a99      	ldr	r2, [pc, #612]	; (8001280 <HAL_GPIO_Init+0x2d4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d85d      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d82a      	bhi.n	8001078 <HAL_GPIO_Init+0xcc>
 8001022:	2b12      	cmp	r3, #18
 8001024:	d859      	bhi.n	80010da <HAL_GPIO_Init+0x12e>
 8001026:	a201      	add	r2, pc, #4	; (adr r2, 800102c <HAL_GPIO_Init+0x80>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	080010a7 	.word	0x080010a7
 8001030:	08001081 	.word	0x08001081
 8001034:	08001093 	.word	0x08001093
 8001038:	080010d5 	.word	0x080010d5
 800103c:	080010db 	.word	0x080010db
 8001040:	080010db 	.word	0x080010db
 8001044:	080010db 	.word	0x080010db
 8001048:	080010db 	.word	0x080010db
 800104c:	080010db 	.word	0x080010db
 8001050:	080010db 	.word	0x080010db
 8001054:	080010db 	.word	0x080010db
 8001058:	080010db 	.word	0x080010db
 800105c:	080010db 	.word	0x080010db
 8001060:	080010db 	.word	0x080010db
 8001064:	080010db 	.word	0x080010db
 8001068:	080010db 	.word	0x080010db
 800106c:	080010db 	.word	0x080010db
 8001070:	08001089 	.word	0x08001089
 8001074:	0800109d 	.word	0x0800109d
 8001078:	4a82      	ldr	r2, [pc, #520]	; (8001284 <HAL_GPIO_Init+0x2d8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107e:	e02c      	b.n	80010da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e029      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	3304      	adds	r3, #4
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e024      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	3308      	adds	r3, #8
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e01f      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	330c      	adds	r3, #12
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e01a      	b.n	80010dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ae:	2304      	movs	r3, #4
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e013      	b.n	80010dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010bc:	2308      	movs	r3, #8
 80010be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	611a      	str	r2, [r3, #16]
          break;
 80010c6:	e009      	b.n	80010dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	615a      	str	r2, [r3, #20]
          break;
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x130>
          break;
 80010da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2bff      	cmp	r3, #255	; 0xff
 80010e0:	d801      	bhi.n	80010e6 <HAL_GPIO_Init+0x13a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	e001      	b.n	80010ea <HAL_GPIO_Init+0x13e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3304      	adds	r3, #4
 80010ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2bff      	cmp	r3, #255	; 0xff
 80010f0:	d802      	bhi.n	80010f8 <HAL_GPIO_Init+0x14c>
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x152>
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3b08      	subs	r3, #8
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	210f      	movs	r1, #15
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	6a39      	ldr	r1, [r7, #32]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8090 	beq.w	800124c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800112c:	4b56      	ldr	r3, [pc, #344]	; (8001288 <HAL_GPIO_Init+0x2dc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a55      	ldr	r2, [pc, #340]	; (8001288 <HAL_GPIO_Init+0x2dc>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_GPIO_Init+0x2dc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a49      	ldr	r2, [pc, #292]	; (8001290 <HAL_GPIO_Init+0x2e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1e0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a48      	ldr	r2, [pc, #288]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1dc>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1d8>
 8001180:	2302      	movs	r3, #2
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001184:	2303      	movs	r3, #3
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 800118c:	2300      	movs	r3, #0
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119e:	493b      	ldr	r1, [pc, #236]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4937      	ldr	r1, [pc, #220]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4933      	ldr	r1, [pc, #204]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	492d      	ldr	r1, [pc, #180]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4929      	ldr	r1, [pc, #164]	; (800129c <HAL_GPIO_Init+0x2f0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_GPIO_Init+0x2f0>)
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	4923      	ldr	r1, [pc, #140]	; (800129c <HAL_GPIO_Init+0x2f0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001220:	4013      	ands	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	4919      	ldr	r1, [pc, #100]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	43db      	mvns	r3, r3
 8001246:	4915      	ldr	r1, [pc, #84]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001248:	4013      	ands	r3, r2
 800124a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	3301      	adds	r3, #1
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	f47f aeaf 	bne.w	8000fc0 <HAL_GPIO_Init+0x14>
  }
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	372c      	adds	r7, #44	; 0x2c
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	10320000 	.word	0x10320000
 8001274:	10310000 	.word	0x10310000
 8001278:	10220000 	.word	0x10220000
 800127c:	10210000 	.word	0x10210000
 8001280:	10120000 	.word	0x10120000
 8001284:	10110000 	.word	0x10110000
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40011000 	.word	0x40011000
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43d9      	mvns	r1, r3
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	400b      	ands	r3, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
	...

08001304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e26c      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8087 	beq.w	8001432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001324:	4b92      	ldr	r3, [pc, #584]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b04      	cmp	r3, #4
 800132e:	d00c      	beq.n	800134a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001330:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d112      	bne.n	8001362 <HAL_RCC_OscConfig+0x5e>
 800133c:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d10b      	bne.n	8001362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134a:	4b89      	ldr	r3, [pc, #548]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d06c      	beq.n	8001430 <HAL_RCC_OscConfig+0x12c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d168      	bne.n	8001430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e246      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x76>
 800136c:	4b80      	ldr	r3, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7f      	ldr	r2, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e02e      	b.n	80013d8 <HAL_RCC_OscConfig+0xd4>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x98>
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7a      	ldr	r2, [pc, #488]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a77      	ldr	r2, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xd4>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0xbc>
 80013a6:	4b72      	ldr	r3, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a71      	ldr	r2, [pc, #452]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xd4>
 80013c0:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6a      	ldr	r2, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a67      	ldr	r2, [pc, #412]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcd2 	bl	8000d88 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcce 	bl	8000d88 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1fa      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe4>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fcbe 	bl	8000d88 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fcba 	bl	8000d88 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1e6      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x10c>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d063      	beq.n	8001506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143e:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x18c>
 8001456:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x176>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1ba      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4939      	ldr	r1, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e03a      	b.n	8001506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_RCC_OscConfig+0x270>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fc73 	bl	8000d88 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc6f 	bl	8000d88 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e19b      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4927      	ldr	r1, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_RCC_OscConfig+0x270>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc52 	bl	8000d88 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc4e 	bl	8000d88 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e17a      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03a      	beq.n	8001588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d019      	beq.n	800154e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_RCC_OscConfig+0x274>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fc32 	bl	8000d88 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fc2e 	bl	8000d88 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e15a      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_RCC_OscConfig+0x26c>)
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f000 fad8 	bl	8001afc <RCC_Delay>
 800154c:	e01c      	b.n	8001588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_RCC_OscConfig+0x274>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fc18 	bl	8000d88 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155a:	e00f      	b.n	800157c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fc14 	bl	8000d88 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d908      	bls.n	800157c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e140      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	42420000 	.word	0x42420000
 8001578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b9e      	ldr	r3, [pc, #632]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e9      	bne.n	800155c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a6 	beq.w	80016e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b97      	ldr	r3, [pc, #604]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10d      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b94      	ldr	r3, [pc, #592]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a93      	ldr	r2, [pc, #588]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b91      	ldr	r3, [pc, #580]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b8e      	ldr	r3, [pc, #568]	; (80017fc <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b8b      	ldr	r3, [pc, #556]	; (80017fc <HAL_RCC_OscConfig+0x4f8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a8a      	ldr	r2, [pc, #552]	; (80017fc <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015da:	f7ff fbd5 	bl	8000d88 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7ff fbd1 	bl	8000d88 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b64      	cmp	r3, #100	; 0x64
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0fd      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b81      	ldr	r3, [pc, #516]	; (80017fc <HAL_RCC_OscConfig+0x4f8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x312>
 8001608:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a7a      	ldr	r2, [pc, #488]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	e02d      	b.n	8001672 <HAL_RCC_OscConfig+0x36e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x334>
 800161e:	4b76      	ldr	r3, [pc, #472]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a75      	ldr	r2, [pc, #468]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a72      	ldr	r2, [pc, #456]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	e01c      	b.n	8001672 <HAL_RCC_OscConfig+0x36e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x356>
 8001640:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a6c      	ldr	r2, [pc, #432]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a69      	ldr	r2, [pc, #420]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	e00b      	b.n	8001672 <HAL_RCC_OscConfig+0x36e>
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a66      	ldr	r2, [pc, #408]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a63      	ldr	r2, [pc, #396]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d015      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff fb85 	bl	8000d88 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fb81 	bl	8000d88 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e0ab      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ee      	beq.n	8001682 <HAL_RCC_OscConfig+0x37e>
 80016a4:	e014      	b.n	80016d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fb6f 	bl	8000d88 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7ff fb6b 	bl	8000d88 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e095      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ee      	bne.n	80016ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d105      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d6:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a47      	ldr	r2, [pc, #284]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8081 	beq.w	80017ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d061      	beq.n	80017bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d146      	bne.n	800178e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x4fc>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb3f 	bl	8000d88 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb3b 	bl	8000d88 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e067      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001720:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d108      	bne.n	8001748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	492d      	ldr	r1, [pc, #180]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a19      	ldr	r1, [r3, #32]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	430b      	orrs	r3, r1
 800175a:	4927      	ldr	r1, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x4fc>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fb0f 	bl	8000d88 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fb0b 	bl	8000d88 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e037      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x46a>
 800178c:	e02f      	b.n	80017ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_RCC_OscConfig+0x4fc>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff faf8 	bl	8000d88 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff faf4 	bl	8000d88 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e020      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x498>
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e013      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40007000 	.word	0x40007000
 8001800:	42420060 	.word	0x42420060

08001804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0d0      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d910      	bls.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 0207 	bic.w	r2, r3, #7
 800182e:	4965      	ldr	r1, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800186a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d040      	beq.n	8001924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d115      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e073      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06b      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f023 0203 	bic.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4936      	ldr	r1, [pc, #216]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f4:	f7ff fa48 	bl	8000d88 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff fa44 	bl	8000d88 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e053      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 020c 	and.w	r2, r3, #12
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	429a      	cmp	r2, r3
 8001922:	d1eb      	bne.n	80018fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d210      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	4922      	ldr	r1, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f821 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1cc>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1d0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9a6 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	0800206c 	.word	0x0800206c
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b490      	push	{r4, r7}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019e0:	1d3c      	adds	r4, r7, #4
 80019e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e8:	f240 2301 	movw	r3, #513	; 0x201
 80019ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x40>
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x46>
 8001a16:	e02d      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1a:	623b      	str	r3, [r7, #32]
      break;
 8001a1c:	e02d      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	0c5b      	lsrs	r3, r3, #17
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a56:	fb02 f203 	mul.w	r2, r2, r3
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e004      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	623b      	str	r3, [r7, #32]
      break;
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a76:	623b      	str	r3, [r7, #32]
      break;
 8001a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc90      	pop	{r4, r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	0800205c 	.word	0x0800205c
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	007a1200 	.word	0x007a1200
 8001a94:	003d0900 	.word	0x003d0900

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff2 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	0800207c 	.word	0x0800207c

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	0800207c 	.word	0x0800207c

08001afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <RCC_Delay+0x34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <RCC_Delay+0x38>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a5b      	lsrs	r3, r3, #9
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b18:	bf00      	nop
  }
  while (Delay --);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <RCC_Delay+0x1c>
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000000 	.word	0x20000000
 8001b34:	10624dd3 	.word	0x10624dd3

08001b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e03f      	b.n	8001bca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff f81a 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f9a7 	bl	8001ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08a      	sub	sp, #40	; 0x28
 8001bd6:	af02      	add	r7, sp, #8
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d17c      	bne.n	8001cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_UART_Transmit+0x2c>
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e075      	b.n	8001cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_UART_Transmit+0x3e>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e06e      	b.n	8001cee <HAL_UART_Transmit+0x11c>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2221      	movs	r2, #33	; 0x21
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c26:	f7ff f8af 	bl	8000d88 <HAL_GetTick>
 8001c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c40:	d108      	bne.n	8001c54 <HAL_UART_Transmit+0x82>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d104      	bne.n	8001c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e003      	b.n	8001c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c64:	e02a      	b.n	8001cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f8e2 	bl	8001e3a <UART_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e036      	b.n	8001cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e007      	b.n	8001cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	3301      	adds	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1cf      	bne.n	8001c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f8b2 	bl	8001e3a <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b08a      	sub	sp, #40	; 0x28
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	f040 808c 	bne.w	8001e30 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_UART_Receive+0x2e>
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e084      	b.n	8001e32 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_UART_Receive+0x40>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e07d      	b.n	8001e32 <HAL_UART_Receive+0x13c>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2222      	movs	r2, #34	; 0x22
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d52:	f7ff f819 	bl	8000d88 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6c:	d108      	bne.n	8001d80 <HAL_UART_Receive+0x8a>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	e003      	b.n	8001d88 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d90:	e043      	b.n	8001e1a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f84c 	bl	8001e3a <UART_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e042      	b.n	8001e32 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e01f      	b.n	8001e0c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	d007      	beq.n	8001de6 <HAL_UART_Receive+0xf0>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_UART_Receive+0xfe>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e008      	b.n	8001e06 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1b6      	bne.n	8001d92 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4613      	mov	r3, r2
 8001e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e4a:	e02c      	b.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e52:	d028      	beq.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e5a:	f7fe ff95 	bl	8000d88 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d21d      	bcs.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e00f      	b.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d0c3      	beq.n	8001e4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f0a:	f023 030c 	bic.w	r3, r3, #12
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <UART_SetConfig+0x114>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f38:	f7ff fdcc 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	e002      	b.n	8001f46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f40:	f7ff fdb4 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8001f44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009a      	lsls	r2, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <UART_SetConfig+0x118>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	0119      	lsls	r1, r3, #4
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009a      	lsls	r2, r3, #2
 8001f70:	441a      	add	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <UART_SetConfig+0x118>)
 8001f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2064      	movs	r0, #100	; 0x64
 8001f86:	fb00 f303 	mul.w	r3, r0, r3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	3332      	adds	r3, #50	; 0x32
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <UART_SetConfig+0x118>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	4419      	add	r1, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009a      	lsls	r2, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <UART_SetConfig+0x118>)
 8001fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2064      	movs	r0, #100	; 0x64
 8001fbe:	fb00 f303 	mul.w	r3, r0, r3
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	3332      	adds	r3, #50	; 0x32
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <UART_SetConfig+0x118>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	440a      	add	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	51eb851f 	.word	0x51eb851f

08001fec <__libc_init_array>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	2600      	movs	r6, #0
 8001ff0:	4d0c      	ldr	r5, [pc, #48]	; (8002024 <__libc_init_array+0x38>)
 8001ff2:	4c0d      	ldr	r4, [pc, #52]	; (8002028 <__libc_init_array+0x3c>)
 8001ff4:	1b64      	subs	r4, r4, r5
 8001ff6:	10a4      	asrs	r4, r4, #2
 8001ff8:	42a6      	cmp	r6, r4
 8001ffa:	d109      	bne.n	8002010 <__libc_init_array+0x24>
 8001ffc:	f000 f822 	bl	8002044 <_init>
 8002000:	2600      	movs	r6, #0
 8002002:	4d0a      	ldr	r5, [pc, #40]	; (800202c <__libc_init_array+0x40>)
 8002004:	4c0a      	ldr	r4, [pc, #40]	; (8002030 <__libc_init_array+0x44>)
 8002006:	1b64      	subs	r4, r4, r5
 8002008:	10a4      	asrs	r4, r4, #2
 800200a:	42a6      	cmp	r6, r4
 800200c:	d105      	bne.n	800201a <__libc_init_array+0x2e>
 800200e:	bd70      	pop	{r4, r5, r6, pc}
 8002010:	f855 3b04 	ldr.w	r3, [r5], #4
 8002014:	4798      	blx	r3
 8002016:	3601      	adds	r6, #1
 8002018:	e7ee      	b.n	8001ff8 <__libc_init_array+0xc>
 800201a:	f855 3b04 	ldr.w	r3, [r5], #4
 800201e:	4798      	blx	r3
 8002020:	3601      	adds	r6, #1
 8002022:	e7f2      	b.n	800200a <__libc_init_array+0x1e>
 8002024:	08002084 	.word	0x08002084
 8002028:	08002084 	.word	0x08002084
 800202c:	08002084 	.word	0x08002084
 8002030:	08002088 	.word	0x08002088

08002034 <memset>:
 8002034:	4603      	mov	r3, r0
 8002036:	4402      	add	r2, r0
 8002038:	4293      	cmp	r3, r2
 800203a:	d100      	bne.n	800203e <memset+0xa>
 800203c:	4770      	bx	lr
 800203e:	f803 1b01 	strb.w	r1, [r3], #1
 8002042:	e7f9      	b.n	8002038 <memset+0x4>

08002044 <_init>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	bf00      	nop
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr

08002050 <_fini>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	bf00      	nop
 8002054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002056:	bc08      	pop	{r3}
 8002058:	469e      	mov	lr, r3
 800205a:	4770      	bx	lr
